def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.free.aesthetic.wallpaper.hd4k.hd.wallpaperdownloader"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 107
        versionName 'V1.07'

        multiDexEnabled true

        //android studio 4.0 以上打包会出现这个问题
        lintOptions { checkReleaseBuilds false }
    }

    //签名配置
    signingConfigs {
        /*release {
            keyAlias 'ruilian'
            keyPassword 'ruilian123456'
            storeFile file('../wallpaper.jks')
            storePassword 'ruilian123456'
        }*/

        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            ndk {
                // 设置支持的SO库架构
                abiFilters  'armeabi-v7a'
                //abiFilters  'armeabi','armeabi-v7a', 'x86','x86_64', 'mips', 'mips64', 'arm64-v8a'
            }
            profile {
                //matchingFallbacks 表示如果引用的模块中不存在相同的 buildType，则使用这些替补选项
                matchingFallbacks = ['debug', 'release']
            }
            //压缩
            minifyEnabled true
            //混淆
            useProguard true
            //r8压缩配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
        }

    }
}

flutter {
    source '../..'
}

//apply plugin: 'com.google.gms.google-services'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'com.google.android.play:core:1.9.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
}
